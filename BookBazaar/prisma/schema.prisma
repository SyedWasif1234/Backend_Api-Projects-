// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_DBURL")
}

enum UserRole {
  USER
  ADMIN
}

enum ApiKey_Role {
  USER
  ADMIN
  BLOCKED
  READ_ONLY
}

model User {
  id                  String   @id @default(cuid())
  name                String
  email               String   @unique
  password            String
  role                UserRole @default(USER)
  verificationToken   String?
  passwordResetToken  String?
  PasswordResetExpiry String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())

  apiKeys   ApiKey[]
  purchases PurchasedBook[]
  Reviews   Review[]
}

model ApiKey {
  id        String      @id @default(cuid())
  key       String      @unique
  userId    String
  createdAt DateTime    @default(now())
  expiresAt DateTime?
  isActive  Boolean     @default(true)
  role      ApiKey_Role @default(USER)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Book {
  id          String   @id @default(cuid())
  title       String
  author      String
  price       Float
  description String
  createdAt   DateTime @default(now())

  purchases PurchasedBook[]
  reviews   Review[]
}

model PurchasedBook {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId]) // Prevent duplicate purchases
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  bookId      String
  description String
  rating      Int
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
}


/*  Entity                           Relation                         
 ---------------------------------------------------------------------   
 User ↔️ Book (purchase)   ->   Many-to-Many via `PurchasedBook` 
 User → Review              ->   One-to-Many                      
 Book → Review              ->   One-to-Many                     
 */

 